package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.74

import (
	"context"
	"encoding/json"

	"github.com/vektah/gqlparser/v2/gqlerror"
	"wetee.app/dsecret/internal/model"
)

// UploadSecret is the resolver for the upload_secret field.
func (r *mutationResolver) UploadSecret(ctx context.Context, secret model.Env) (*model.SecretEnvWithHash, error) {
	return dkgIns.SetSecretEnv(ctx, secret)
}

// Secret is the resolver for the secret field.
func (r *queryResolver) Secret(ctx context.Context, hash string) (*model.SecretEnvWithHash, error) {
	return dkgIns.GetSecretPubEnvData(ctx, hash)
}

// TeeReport is the resolver for the tee_report field.
func (r *queryResolver) TeeReport(ctx context.Context, hash string) (string, error) {
	/// 获取报告
	param, report, err := dkgIns.GetReport(hash)
	if err != nil {
		return "", gqlerror.Errorf("GetReport:" + err.Error())
	}

	// 组合报告
	result := map[string]any{
		"param":  param,
		"report": report,
	}
	bt, err := json.Marshal(result)
	if err != nil {
		return "", gqlerror.Errorf("Marshal:" + err.Error())
	}
	return string(bt), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
