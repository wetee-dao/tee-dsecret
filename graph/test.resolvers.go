package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.74

import (
	"context"
	"fmt"
	"time"

	"github.com/vektah/gqlparser/v2/gqlerror"
	"wetee.app/dsecret/internal/model"
	sidechain "wetee.app/dsecret/side-chain"
)

// AddTx is the resolver for the add_tx field.
func (r *mutationResolver) AddTx(ctx context.Context, text string) (bool, error) {
	sidechain.SubmitTx(&model.Tx{
		Payload: &model.Tx_Test{
			Test: text + fmt.Sprint(time.Now().Unix()),
		},
	})

	return true, nil
}

// Validators is the resolver for the validators field.
func (r *queryResolver) Validators(ctx context.Context) ([]string, error) {
	validators, _, err := sideChain.GetValidators()
	if err != nil {
		return nil, gqlerror.Errorf("GetValidators:" + err.Error())
	}

	list := make([]string, 0, len(validators))
	for _, v := range validators {
		pub := model.PubKeyFromByte(v.Pubkey)
		list = append(list, pub.SS58())
	}
	return list, nil
}
